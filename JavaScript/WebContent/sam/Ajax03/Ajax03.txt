***Asynchronous Javascript and XML***
Part 3 이벤트, CSS, 드래그&드롭
Chap 8 이벤트 처리
1. 이벤트 처리 방식과 이벤트 대상 
     1.1 고전 방식의 이벤트 처리 
     1.2 이벤트 리스너 방식 처리 
     1.3 이벤트 리스너 관련 모듈 만들기 
     1.4 이벤트 구하고 이벤트 대상 찾기 
 :  ajax.js + log.js
 : [ajax.js]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

ajax.Event = {};
ajax.Event.addListener = function(element, name, observer, useCapture) {
    useCapture = useCapture || false;

	if (element.addEventListener) {
		element.addEventListener(name, observer, useCapture);
	} else if (element.attachEvent) {
		element.attachEvent('on' + name, observer);
	}
}
ajax.Event.removeListener = function(element, name, observer, useCapture) {
	useCapture = useCapture || false;
	
	if (element.removeEventListener) {
		element.removeEventListener(name, observer, useCapture);
	} else if (element.detachEvent) {
		element.detachEvent('on' + name, observer);
	}
}
ajax.Event.getTarget = function(event) {
	if (event == null) return null;
	if (event.target) return event.target;
	else if (event.srcElement) return event.srcElement;
	return null;
}
ajax.Event.getMouseXY = function(event) {
	var mouseX = event.clientX;
	var mouseY = event.clientY;
	
	var dd = document.documentElement;
	var db = document.body;
	if (dd) {
		mouseX += dd.scrollLeft;
		mouseY += dd.scrollTop;
	} else if (db) {
		mouseX += db.scrollLeft;
		mouseY += db.scrollTop;
	}
	return {x: mouseX, y: mouseY};
}
ajax.Event.isLeftButton= function(event) {
	return (event.which) ? 
	       event.which == 1 && event.button == 0 :
	       (event.type == 'click') ? event.button == 0 : event.button == 1;
}
ajax.Event.isRightButton = function(event) {
	return event.button == 2;
}
ajax.Event.stopPropagation = function(event) {
	if (event.stopPropagation) {
	    event.stopPropagation();
	} else {
	    event.cancelBubble = true;
	}
}
ajax.Event.preventDefault = function(event) {
	if (event.preventDefault) {
	    event.preventDefault();
	} else {
	    event.returnValue = false;
	}
}
ajax.Event.stopEvent = function(event) {
	ajax.Event.stopPropagation(event);
	ajax.Event.preventDefault(event);
}
ajax.Event.bindAsListener = function(func, obj) {
	return function() {
		return func.apply(obj, arguments);
	}
}

 : [log.js]
function log(msg) {
	var console = document.getElementById("debugConsole");
	if (console != null) {
		console.innerHTML += msg +"<br/>";
	}
}

 : [testEventModule.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>이벤트 모듈 사용 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var btn1 = document.getElementById("btn1");
		ajax.Event.addListener(btn1, "click", processClick);
		ajax.Event.addListener(btn1, "click", doClickOnBtn1);
	}
	function processClick() {
		log("processClick 이벤트 핸들러");
	}
	function doClickOnBtn1() {
		log("doClickOnBtn1 이벤트 핸들러");
	}
	</script>
</head>
<body>
<input type="button" id="btn1" value="버튼"/>
<div id="debugConsole"></div>
</body>
</html>

 : [testEventTarget.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>이벤트 모듈 사용 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var btn1 = document.getElementById("btn1");
		ajax.Event.addListener(btn1, "click", processClick);
	}
	function processClick(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		log("이벤트 대상: " + target.nodeName);
		log("대상의 ID: " + target.id);
		log("이벤트 타입: " + event.type);
	}
	</script>
</head>
<body>
<input type="button" id="btn1" value="버튼"/>
<div id="debugConsole"></div>
</body>
</html>

 2. 마우스 이벤트 
     2.1 마우스 이벤트의 종류 
     2.2 마우스 이벤트 발생 위치 구하기 
     2.3 마우스 클릭 버튼 판별하기 
     2.4 마우스 이벤트 관련 모듈 추가 

 : [button.js]
InvalidButton = function(elementId) {
	this.element = document.getElementById(elementId);
	ajax.Event.addListener(this.element, "mouseover", this.doMouseOver);
	ajax.Event.addListener(this.element, "mouseout", this.doMouseOut);
}
InvalidButton.prototype = {
	doMouseOver: function(e) {
		this.element.style.background = '#999';
	},
	doMouseOut: function(e) {
		this.element.style.background = '#fff';
	}
}

ValidButton = function(elementId) {
	this.element = document.getElementById(elementId);
	var btn = this;
	var overFunc = function() {
		btn.doMouseOver.apply(btn, arguments);
	}
	var outFunc = function() {
		btn.doMouseOut.apply(btn, arguments);
	}
	/*
	var overFunc = ajax.Event.bindAsListener(this.doMouseOver, this);
	var outFunc = ajax.Event.bindAsListener(this.doMouseOut, this);
	*/
	ajax.Event.addListener(this.element, "mouseover", overFunc);
	ajax.Event.addListener(this.element, "mouseout", outFunc);
}
ValidButton.prototype = {
	doMouseOver: function(e) {
		this.element.style.background = '#999';
	},
	doMouseOut: function(e) {
		this.element.style.background = '#fff';
	}
}

 : [testMouseModule.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>마우스</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var cell = document.getElementById("cell");
		ajax.Event.addListener(cell, "mousedown", mouseDownOnCell);
	}
	function mouseDownOnCell(e) {
		var event = window.event || e;
		var xy = ajax.Event.getMouseXY(event);
		var isLeft = ajax.Event.isLeftButton(event);
		var msg = "발생좌표: [" + xy.x + "," + xy.y + "]\n";
		if (isLeft) {
			msg += "왼쪽 버튼";
		} else {
			msg += "왼쪽 버튼 아님";
		}
		alert(msg);
	}
	</script>
</head>
<body>
<div id="cell" style="background-color: #aaaaaa; width: 400px; height: 250px">
마우스이벤트
</span>
</body>
</html>

 : [testMouseEvent.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>마우스 이벤트 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var cell = document.getElementById("cell");
		ajax.Event.addListener(cell, "mouseover", mouseOverOnCell);
		ajax.Event.addListener(cell, "mouseout", mouseOutOnCell);
		ajax.Event.addListener(cell, "click", clickOnCell);
	}
	function mouseOverOnCell(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		target.style.background = "#cccccc";
	}
	function mouseOutOnCell(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		target.style.background = "#ffffff";
	}
	function clickOnCell(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		alert(target.id+"에서 클릭");
	}
	</script>
</head>
<body>
<span id="cell">마우스이벤트</span>
</body>
</html>

 : [testInvalidButton.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>잘못된 this 참조</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="button.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var btn = new InvalidButton("invalid");
	}
	</script>
</head>
<body>
<span id="invalid">잘못된 버튼 예제</span>
</body>
</html>

 : [testValidButton.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>this 문제 해결</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="button.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var btn = new ValidButton("invalid");
	}
	</script>
</head>
<body>
<span id="invalid">버튼 예제</span>
</body>
</html>

 3. 키보드 이벤트
  : [testKeyEvent.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>이벤트 모듈 사용 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var txt1 = document.getElementById("txt1");
		ajax.Event.addListener(txt1, "keydown", keydownOnTxt1);
	}
	function keydownOnTxt1(e) {
		var event = window.event || e;
		var txtKeycode = document.getElementById("txtKeycode");
		var txtCtrlKey = document.getElementById("txtCtrlKey");
		var txtShiftKey = document.getElementById("txtShiftKey");
		txtKeycode.value = event.keyCode;
		txtCtrlKey.value = event.ctrlKey;
		txtShiftKey.value = event.shiftKey;
	}
	</script>
</head>
<body>
<input type="text" id="txt1" value=""/>
<br/>
키코드값: <input type="text" id="txtKeycode" value=""/><br/>
Ctrl: <input type="text" id="txtCtrlKey" value=""/><br/>
Shift: <input type="text" id="txtShiftKey" value=""/><br/>
</body>
</html>

 4. 이벤트 흐름 
     4.1 이벤트 전파 중지시키기	
 : [testPropagation.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>이벤트 전파 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var grand = document.getElementById("grand");
		var parent = document.getElementById("parent");
		var child = document.getElementById("child");
		
		ajax.Event.addListener(grand, "mousedown", grandHandler, false);
		ajax.Event.addListener(parent, "mousedown", parentHandlerCapture, true);
		ajax.Event.addListener(parent, "mousedown", parentHandler, false);
		ajax.Event.addListener(child, "mousedown", childHandler, false);
	}
	function grandHandler(event) {
		log("grand");
	}
	function parentHandler(event) {
		log("parent");
	}
	function parentHandlerCapture(event) {
		log("parent capture");
	}
	function childHandler(event) {
		log("child");
	}
	</script>
</head>
<body>
<div id="grand" style="border:1px solid #333">
grand의 상단
	<div id="parent" style="border:1px solid red">
	parent의 상단
		<div id="child" style="border:1px solid blue">
		child
		</div>
	parent의 하단
	</div>
grand의 하단
</div>
<div id="debugConsole" style="border: 1px solid #000"></div>
</body>
</html>

 : [testStopEvent.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>이벤트 전파 중지 예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var parent = document.getElementById("parent");
		var child = document.getElementById("child");
		
		ajax.Event.addListener(parent, "mousedown", parentHandler, false);
		ajax.Event.addListener(child, "mousedown", childHandler, false);
	}
	function parentHandler(e) {
		log("parent");
	}
	function childHandler(e) {
		log("child");
		var event = window.event || e;
		ajax.Event.stopEvent(event);
	}
	</script>
</head>
<body>
<div id="parent" style="border:1px solid red">
parent의 상단
	<div id="child" style="border:1px solid blue">
	child
	</div>
parent의 하단
</div>
<div id="debugConsole" style="border: 1px solid #000"></div>
</body>
</html>

 5. 이벤트 핸들러의 this 문제와 처리 방법  

Chap 9 CSS 조작하기
 : [ajax.js]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

ajax.Event = {};
ajax.Event.addListener = function(element, name, observer, useCapture) {
    useCapture = useCapture || false;

	if (element.addEventListener) {
		element.addEventListener(name, observer, useCapture);
	} else if (element.attachEvent) {
		element.attachEvent('on' + name, observer);
	}
}
ajax.Event.removeListener = function(element, name, observer, useCapture) {
	useCapture = useCapture || false;
	
	if (element.removeEventListener) {
		element.removeEventListener(name, observer, useCapture);
	} else if (element.detachEvent) {
		element.detachEvent('on' + name, observer);
	}
}
ajax.Event.getTarget = function(event) {
	if (event == null) return null;
	if (event.target) return event.target;
	else if (event.srcElement) return event.srcElement;
	return null;
}
ajax.Event.getMouseXY = function(event) {
	var mouseX = event.clientX;
	var mouseY = event.clientY;
	
	var dd = document.documentElement;
	var db = document.body;
	if (dd) {
		mouseX += dd.scrollLeft;
		mouseY += dd.scrollTop;
	} else if (db) {
		mouseX += db.scrollLeft;
		mouseY += db.scrollTop;
	}
	return {x: mouseX, y: mouseY};
}
ajax.Event.isLeftButton= function(event) {
	return (event.which) ? 
	       event.which == 1 && event.button == 0 :
	       (event.type == 'click') ? event.button == 0 : event.button == 1;
}
ajax.Event.isRightButton = function(event) {
	return event.button == 2;
}
ajax.Event.stopPropagation = function(event) {
	if (event.stopPropagation) {
	    event.stopPropagation();
	} else {
	    event.cancelBubble = true;
	}
}
ajax.Event.preventDefault = function(event) {
	if (event.preventDefault) {
	    event.preventDefault();
	} else {
	    event.returnValue = false;
	}
}
ajax.Event.stopEvent = function(event) {
	ajax.Event.stopPropagation(event);
	ajax.Event.preventDefault(event);
}
ajax.Event.bindAsListener = function(func, obj) {
	return function() {
		return func.apply(obj, arguments);
	}
}

ajax.GUI = {};
ajax.GUI.setOpacity = function(el, opacity) {
	if (el.filters) {
		el.style.filter = 'alpha(opacity=' + opacity * 100 + ')';
	} else {
		el.style.opacity = opacity;
	}
}
ajax.GUI.getStyle = function(el, property) {
	var value = null;
	var dv = document.defaultView;
	
	if (property == 'opacity' && el.filters) {// IE opacity
		value = 1;
		try {
			value = el.filters.item('alpha').opacity / 100;
		} catch(e) {}
	} else if (el.style[property]) {
		value = el.style[property];
	} else if (el.currentStyle && el.currentStyle[property]) {
		value = el.currentStyle[property];
	} else if ( dv && dv.getComputedStyle ) {
		// 대문자를 소문자로 변환하고 그 앞에 '-'를 붙인다.
		var converted = '';
		for(i = 0, len = property.length;i < len; ++i) {
			if (property.charAt(i) == property.charAt(i).toUpperCase()) {
				converted = converted + '-' + 
				            property.charAt(i).toLowerCase();
			} else {
				converted = converted + property.charAt(i);
			}
		}
		if (dv.getComputedStyle(el, '').getPropertyValue(converted)) {
			value = dv.getComputedStyle(el, '').getPropertyValue(converted);
		}
	}
	return value;
}

ajax.GUI.getXY = function(el) {
	// el은 문서에 포함되어 있어야 하고, 화면에 보여야 한다.
	if (el.parentNode === null || el.style.display == 'none') {
		return false;
	}
	
	var parent = null;
	var pos = [];
	var box;
	
	if (document.getBoxObjectFor) { // gecko 엔진 기반
		box = document.getBoxObjectFor(el);
		pos = [box.x, box.y];
	} else { // 기타 브라우저
		pos = [el.offsetLeft, el.offsetTop];
		parent = el.offsetParent;
		if (parent != el) {
			while (parent) {
				pos[0] += parent.offsetLeft;
				pos[1] += parent.offsetTop;
				parent = parent.offsetParent;
			}
		}
		// 오페라와 사파리의 'absolute' postion의 경우
		// body의 offsetTop을 잘못 계산하므로 보정해야 한다.
		var ua = navigator.userAgent.toLowerCase();
		if (
			ua.indexOf('opera') != -1
			|| ( ua.indexOf('safari') != -1 && this.getStyle(el, 'position') == 'absolute' )
		) {
			pos[1] -= document.body.offsetTop;
		}
	}
	
	if (el.parentNode) { parent = el.parentNode; }
	else { parent = null; }
	
	// body 또는 html 이외의 부모 노드 중에 스크롤되어 있는
	// 영역이 있다면 알맞게 처리한다.
	while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {
		pos[0] -= parent.scrollLeft;
		pos[1] -= parent.scrollTop;
		
		if (parent.parentNode) { parent = parent.parentNode; }
		else { parent = null; }
	}
	return {x: pos[0], y: pos[1]};
}
ajax.GUI.getX = function(el) {
	return ajax.GUI.getXY(el).x;
}
ajax.GUI.getY = function(el) {
	return ajax.GUI.getXY(el).y;
}
ajax.GUI.getBounds = function(el) {
	var xy = ajax.GUI.getXY(el);
	return {
		x: xy.x,
		y: xy.y,
		width: el.offsetWidth,
		height: el.offsetHeight
	};
}
ajax.GUI.setXY = function(el, x, y) {
	var pageXY = ajax.GUI.getXY(el);
	if (pageXY === false) { return false; }
	var position = ajax.GUI.getStyle(el, 'position');
	if (!position || position == 'static') {
		el.style.position = 'relative';
	}
	var delta = {
		x: parseInt( ajax.GUI.getStyle(el, 'left'), 10 ),
		y: parseInt( ajax.GUI.getStyle(el, 'top'), 10 )
	};
	if ( isNaN(delta.x) ) { delta.x = 0; }
	if ( isNaN(delta.y) ) { delta.y = 0; }
	
	if (x != null) {
		el.style.left = (x - pageXY.x + delta.x) + 'px';
	}
	if (y != null) {
		el.style.top = (y - pageXY.y + delta.y) + 'px';
	}
	
	return true;
}

 1. CSS 스타일 변경하기 
     1.1 style 프로퍼티를 사용한 스타일 변경 
 :[changeStyle.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>style 변경</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var changeBtn = document.getElementById("changeBtn");
		ajax.Event.addListener(changeBtn, "click", doClickOnChangeBtn);
	}
	function doClickOnChangeBtn() {
		var color = document.f.color.value;
		var backgroundColor = document.f.backgroundColor.value;
		var borderColor = document.f.borderColor.value;
		var height = document.f.height.value;
		
		var view = document.getElementById("view");
		if (color != '') {
			view.style.color = color;
		}
		if (backgroundColor != '') {
			view.style.backgroundColor = backgroundColor;
		}
		if (borderColor != '') {
			view.style.borderColor = borderColor;
		}
		if (height != '') {
			view.style.height = height + "px";
		}
	}
	</script>
</head>
<body>
<div id="view" style="border: 3px solid #000">스타일을 변경해보세요.</div>
<form name="f">
글자색: <input type="text" name="color"/><br/>
배경색: <input type="text" name="backgroundColor"/><br/>
보더색: <input type="text" name="borderColor"/><br/>
높이: <input type="text" name="height"/><br/>
<input type="button" value="변경" id="changeBtn" />
</form>
</body>
</html>

     1.2 className 프로퍼티를 사용한 CSS 클래스 변경
 : [changeClass.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>CSS Class 변경</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var redRadio = document.getElementById("red");
		var blueRadio = document.getElementById("blue");
		var blackRadio = document.getElementById("black");
		
		ajax.Event.addListener(redRadio, "click", 
			ajax.Event.bindAsListener(doClickOnRadio, redRadio));
		ajax.Event.addListener(blueRadio, "click",
			ajax.Event.bindAsListener(doClickOnRadio, blueRadio));
		ajax.Event.addListener(blackRadio, "click", 
			ajax.Event.bindAsListener(doClickOnRadio, blackRadio));
	}
	
	function doClickOnRadio() {
		var view = document.getElementById("view");
		view.className = this.value;
	}
	</script>
	<style type="text/css">
	div.red {
		font-weight: bold;
		color: red;
		background-color: #00FFFF;
	}
	div.blue {
		font-weight: bold;
		color: blue;
		background-color: #FFFF00;
	}
	div.black {
		font-weight: bold;
		color: #000000;
		background-color: #CCCCCC;
	}
	</style>
</head>
<body>
<div id="view" class="black">스킨을 변경해보세요.</div>
<form name="f">
<input type="radio" name="skinName" id="red" value="red" />RED
<input type="radio" name="skinName" id="blue" value="blue" />BLUE
<input type="radio" name="skinName" id="black" value="black" checked="checked" />BLACK
</form>
</body>
</html>

 2. 크로스 브라우저 투명 처리 코드 
 : [changeOpacity.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>투명도 변경</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var btn1 = document.getElementById("btn1");
		ajax.Event.addListener(btn1, "click", doClickOnBtn1);
	}
	function doClickOnBtn1() {
		var view = document.getElementById("view");
		var opacityVal = document.f.opacity.value;
		if (opacityVal != '') {
			ajax.GUI.setOpacity(view, eval(opacityVal));
		}
	}
	</script>
	<style type="text/css">
	div.black {
		position: absolute;
		left: 20px;
		top: 70px;
		font-weight: bold;
		color: #000000;
		background-color: #CCCCCC;
	}
	</style>
</head>
<body>
<form name="f">
투명도: <input type="text" name="opacity" size="5" value="" />
<input type="button" id="btn1" value="투명도 지정" />
</form>

<div>
	투명색 텍스트입니다.<br/>
	이 view가 투명해질 경우 이 부분이<br/>
	출력됩니다.
</div>
<div id="view" class="black">투명도 적용 영역</div>
</body>
</html>

 3. CSS 스타일 값 구하기 문제 및 해결 방법 
  : [displayStyleBad.html]
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>style을 잘못 구한 경우</title>
	<script type="text/javascript">
	function displayStyle() {
		var d = document.getElementById("d");
		var abc = document.getElementById("abc");
		
		var msg = "[d의 정보]\n"+
			"font-weight : " + d.style.fontWeight + "\n"+
			"font-size   : " + d.style.fontSize + "\n"+
			"[abc의 정보]\n"+
			"position : " + abc.style.position + "\n"+
			"width    : " + abc.style.width + "\n"
		alert(msg);
	}
	</script>
	<style type="text/css">
	span {
		font-weight: 700
	}
	#abc {
		background: blue;
		font-size: 0;
		position: absolute;
		top: 150px; left: 150px;
	}
	</style>
</head>
<body>
<input type="button" onclick="displayStyle()" value="스타일정보" />
<p><span id="d" style="font-size: 12px">스타일 정보</span>를
구하는 예제입니다.</p>
<div id="abc" style="width: 10px; height: 10px;"></div>
</body>
</html>

  : [displayStyleGood.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>모듈을 사용한 style 구하기</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	function displayStyle() {
		var d = document.getElementById("d");
		var abc = document.getElementById("abc");
		
		var msg = "[d의 정보]\n"+
			"font-weight : " + ajax.GUI.getStyle(d, "fontWeight") + "\n"+
			"font-size   : " + ajax.GUI.getStyle(d, "fontSize") + "\n"+
			"[abc의 정보]\n"+
			"position : " + ajax.GUI.getStyle(abc, "position") + "\n"+
			"width    : " + ajax.GUI.getStyle(abc, "width") + "\n"
		alert(msg);
	}
	</script>
	<style type="text/css">
	span {
		font-weight: 700
	}
	#abc {
		background: blue;
		font-size: 0;
		position: absolute;
		top: 150px; left: 150px;
	}
	</style>
</head>
<body>
<input type="button" onclick="displayStyle()" value="스타일정보" />
<p><span id="d" style="font-size: 12px">스타일 정보</span>를
구하는 예제입니다.</p>
<div id="abc" style="width: 10px; height: 10px;"></div>
</body>
</html>

 4. 요소의 위치와 크기 
 : [position.css]
body { margin:0; }
#doc { margin:10px; }
p { border: 1px solid #ccc; margin: 0}
#test {
   background: #ccc;
   font-size: 0;
   width: 10px; height: 10px;
   z-index: 10;
}
#end {
   background: red;
   font-size: 0;
   position: relative;
   top: 50px; left: 30px;
   width: 10px; height: 10px;
}
#abs {
	background: blue;
	font-size: 0;
	position: absolute;
	top: 150px; left: 150px;
	width: 10px; height: 10px;
}

 : [viewPosition.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>위치값 구하기</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	ajax.Event.addListener(window, "load", viewPosition);
	
	function viewPosition() {
		var testPos = ajax.GUI.getXY(document.getElementById("test"));
		var endPos = ajax.GUI.getXY(document.getElementById("end"));
		var absPos = ajax.GUI.getXY(document.getElementById("abs"));
		
		alert("test 위치: ["+testPos.x+","+testPos.y+"]\n"+
		      "end 위치: ["+endPos.x+","+endPos.y+"]\n"+
		      "abs위치: ["+absPos.x+","+absPos.y+"]");
	}
	</script>
	<link rel="stylesheet" type="text/css" href="position.css">
</head>
<body>
<div id="doc">
   <h1>위치 구하기 예제: getXY</h1>
   <p>이 예제는 ajax.GUI.getXY 함수를 사용해서<br/>
   요소의 위치를 구하는 예제입니다.</p>
   <div id="test"></div>
   <div id="end"></div>
   <div id="abs"></div>
</div>
</body>
</html>

Chap 10 드래그 구현
 : [ajax.js]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

ajax.Event = {};
ajax.Event.addListener = function(element, name, observer, useCapture) {
    useCapture = useCapture || false;

	if (element.addEventListener) {
		element.addEventListener(name, observer, useCapture);
	} else if (element.attachEvent) {
		element.attachEvent('on' + name, observer);
	}
}
ajax.Event.removeListener = function(element, name, observer, useCapture) {
	useCapture = useCapture || false;
	
	if (element.removeEventListener) {
		element.removeEventListener(name, observer, useCapture);
	} else if (element.detachEvent) {
		element.detachEvent('on' + name, observer);
	}
}
ajax.Event.getTarget = function(event) {
	if (event == null) return null;
	if (event.target) return event.target;
	else if (event.srcElement) return event.srcElement;
	return null;
}
ajax.Event.getMouseXY = function(event) {
	var mouseX = event.clientX;
	var mouseY = event.clientY;
	
	var dd = document.documentElement;
	var db = document.body;
	if (dd) {
		mouseX += dd.scrollLeft;
		mouseY += dd.scrollTop;
	} else if (db) {
		mouseX += db.scrollLeft;
		mouseY += db.scrollTop;
	}
	return {x: mouseX, y: mouseY};
}
ajax.Event.isLeftButton= function(event) {
	return (event.which) ? 
	       event.which == 1 && event.button == 0 :
	       (event.type == 'click') ? event.button == 0 : event.button == 1;
}
ajax.Event.isRightButton = function(event) {
	return event.button == 2;
}
ajax.Event.stopPropagation = function(event) {
	if (event.stopPropagation) {
	    event.stopPropagation();
	} else {
	    event.cancelBubble = true;
	}
}
ajax.Event.preventDefault = function(event) {
	if (event.preventDefault) {
	    event.preventDefault();
	} else {
	    event.returnValue = false;
	}
}
ajax.Event.stopEvent = function(event) {
	ajax.Event.stopPropagation(event);
	ajax.Event.preventDefault(event);
}
ajax.Event.bindAsListener = function(func, obj) {
	return function() {
		return func.apply(obj, arguments);
	}
}

ajax.GUI = {};
ajax.GUI.setOpacity = function(el, opacity) {
	if (el.filters) {
		el.style.filter = 'alpha(opacity=' + opacity * 100 + ')';
	} else {
		el.style.opacity = opacity;
	}
}
ajax.GUI.getStyle = function(el, property) {
	var value = null;
	var dv = document.defaultView;
	
	if (property == 'opacity' && el.filters) {// IE opacity
		value = 1;
		try {
			value = el.filters.item('alpha').opacity / 100;
		} catch(e) {}
	} else if (el.style[property]) {
		value = el.style[property];
	} else if (el.currentStyle && el.currentStyle[property]) {
		value = el.currentStyle[property];
	} else if ( dv && dv.getComputedStyle ) {
		// 대문자를 소문자로 변환하고 그 앞에 '-'를 붙인다.
		var converted = '';
		for(i = 0, len = property.length;i < len; ++i) {
			if (property.charAt(i) == property.charAt(i).toUpperCase()) {
				converted = converted + '-' + 
				            property.charAt(i).toLowerCase();
			} else {
				converted = converted + property.charAt(i);
			}
		}
		if (dv.getComputedStyle(el, '').getPropertyValue(converted)) {
			value = dv.getComputedStyle(el, '').getPropertyValue(converted);
		}
	}
	return value;
}

ajax.GUI.getXY = function(el) {
	// el은 문서에 포함되어 있어야 하고, 화면에 보여야 한다.
	if (el.parentNode === null || el.style.display == 'none') {
		return false;
	}
	
	var parent = null;
	var pos = [];
	var box;
	
	if (document.getBoxObjectFor) { // gecko 엔진 기반
		box = document.getBoxObjectFor(el);
		pos = [box.x, box.y];
	} else { // 기타 브라우저
		pos = [el.offsetLeft, el.offsetTop];
		parent = el.offsetParent;
		if (parent != el) {
			while (parent) {
				pos[0] += parent.offsetLeft;
				pos[1] += parent.offsetTop;
				parent = parent.offsetParent;
			}
		}
		// 오페라와 사파리의 'absolute' postion의 경우
		// body의 offsetTop을 잘못 계산하므로 보정해야 한다.
		var ua = navigator.userAgent.toLowerCase();
		if (
			ua.indexOf('opera') != -1
			|| ( ua.indexOf('safari') != -1 && this.getStyle(el, 'position') == 'absolute' )
		) {
			pos[1] -= document.body.offsetTop;
		}
	}
	
	if (el.parentNode) { parent = el.parentNode; }
	else { parent = null; }
	
	// body 또는 html 이외의 부모 노드 중에 스크롤되어 있는
	// 영역이 있다면 알맞게 처리한다.
	while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {
		pos[0] -= parent.scrollLeft;
		pos[1] -= parent.scrollTop;
		
		if (parent.parentNode) { parent = parent.parentNode; }
		else { parent = null; }
	}
	return {x: pos[0], y: pos[1]};
}
ajax.GUI.getX = function(el) {
	return ajax.GUI.getXY(el).x;
}
ajax.GUI.getY = function(el) {
	return ajax.GUI.getXY(el).y;
}
ajax.GUI.getBounds = function(el) {
	var xy = ajax.GUI.getXY(el);
	return {
		x: xy.x,
		y: xy.y,
		width: el.offsetWidth,
		height: el.offsetHeight
	};
}
ajax.GUI.setXY = function(el, x, y) {
	var pageXY = ajax.GUI.getXY(el);
	if (pageXY === false) { return false; }
	var position = ajax.GUI.getStyle(el, 'position');
	if (!position || position == 'static') {
		el.style.position = 'relative';
	}
	var delta = {
		x: parseInt( ajax.GUI.getStyle(el, 'left'), 10 ),
		y: parseInt( ajax.GUI.getStyle(el, 'top'), 10 )
	};
	if ( isNaN(delta.x) ) { delta.x = 0; }
	if ( isNaN(delta.y) ) { delta.y = 0; }
	
	if (x != null) {
		el.style.left = (x - pageXY.x + delta.x) + 'px';
	}
	if (y != null) {
		el.style.top = (y - pageXY.y + delta.y) + 'px';
	}
	
	return true;
}

 : [dnd.js]
ajax.dnd = {};

ajax.dnd.SimpleDragSource = function(elementId) {
	this.element = document.getElementById(elementId);
	this.dragging = false; // 현재 드래그중인지 여부 표시
	this.selected = false; // 현재 마우스다운 상태인지 표시
	this.diff = null; // 마우스 위치와 객체 위치
	
	this.mouseDown = ajax.Event.bindAsListener(this.doMouseDown, this);
	this.mouseMove = ajax.Event.bindAsListener(this.doMouseMove, this);
	this.mouseUp = ajax.Event.bindAsListener(this.doMouseUp, this);
	
	ajax.Event.addListener(
		this.element, "mousedown", this.mouseDown);
}
ajax.dnd.SimpleDragSource.prototype = {
	doMouseDown: function(e) {
		var event = window.event || e;
		if (!ajax.Event.isLeftButton(event)) return;
		
		this.selected = true;
		
		var elementXY = ajax.GUI.getXY(this.element);
		var mouseXY = ajax.Event.getMouseXY(event);
		this.diff = {
			x: mouseXY.x - elementXY.x,
			y: mouseXY.y - elementXY.y
		};
		
		ajax.Event.addListener(document, "mousemove", this.mouseMove);
		ajax.Event.addListener(document, "mouseup", this.mouseUp);
		ajax.Event.stopEvent(event);
	},
	doMouseMove: function(e) {
		if (!this.selected) return false;
		
		if (!this.dragging) {
			this.dragging = true;
			ajax.GUI.setOpacity(this.element, 0.60);
		}
		
		var event = window.event || e;
		var mouseXY = ajax.Event.getMouseXY(event);
		var newXY = {
			x: mouseXY.x - this.diff.x,
			y: mouseXY.y - this.diff.y
		}
		ajax.GUI.setXY(this.element, newXY.x, newXY.y);
		
		ajax.Event.stopEvent(event);
	},
	doMouseUp: function(e) {
		if (!this.selected) return;
		
		this.selected = false;
		this.diff = null;
		
		var event = window.event || e;
		if (this.dragging) {
			this.dragging = false;
			ajax.GUI.setOpacity(this.element, 1.0);
		}
		ajax.Event.removeListener(
			document, "mousemove", this.mouseMove);
		ajax.Event.removeListener(
			document, "mouseup", this.mouseUp);
		ajax.Event.stopEvent(event);
	}
}

ajax.dnd.DNDManager = function() {
	this.dropTargetList = new Array();
	this.dragSourceList = new Array();
	
	this.mouseDown = ajax.Event.bindAsListener(this.doMouseDown, this);
	this.mouseMove = ajax.Event.bindAsListener(this.doMouseMove, this);
	this.mouseUp = ajax.Event.bindAsListener(this.doMouseUp, this);
	
	this.selectedDragSource = null;
}
ajax.dnd.DNDManager.prototype = {
	addDropTarget: function(dropTarget) {
		this.dropTargetList[this.dropTargetList.length] = dropTarget;
	},
	removeDropTarget: function(dropTarget) {
		var newList = new Array();
		for (var i = 0 ; i < this.dropTargetList.length ; i++) {
			if (this.dropTargetList[i] != dropTarget) {
				newList[newList.length] = this.dropTargetList[i];
			}
		}
		this.dropTargetList = newList;
	},
	addDragSource: function(dragSource) {
		this.dragSourceList[this.dragSourceList.length] = dragSource;
		ajax.Event.addListener(dragSource.getElement(),
		                       "mousedown", this.mouseDown);
	},
	removeDragSource: function(dragSource) {
		var newList = new Array();
		for (var i = 0 ; i < this.dropTargetList.length ; i++) {
			if (this.dragSourceList[i] != dragSource) {
				newList[newList.length] = this.dragSourceList[i];
			} else {
				ajax.Event.removeListener(
					dragSource.getElement(),
					"mousedown", this.mouseDown);
			}
		}
		this.dragSourceList = newList;
	},
	doMouseDown: function(e) {
		var event = window.event || e;
		if (!ajax.Event.isLeftButton(event)) return;
		
		var target = ajax.Event.getTarget(event);
		
		while (target && !target.dragSource) {
			target = target.parentNode;
		}
		this.selectedDragSource = target.dragSource;
		this.selectedDragSource.selectDrag(event);
		
		ajax.Event.addListener(document, "mousemove", this.mouseMove);
		ajax.Event.addListener(document, "mouseup", this.mouseUp);
		ajax.Event.stopEvent(event);
	},
	doMouseMove: function(e) {
		if (!this.selectedDragSource) return;

		var event = window.event || e;
		if (!this.selectedDragSource.isDragging()) {
			this.selectedDragSource.startDrag();
		}
		
		this.selectedDragSource.moveDrag(event);
		
		ajax.Event.stopEvent(event);
	},
	doMouseUp: function(e) {
		if (!this.selectedDragSource) return;
		
		var dragSource = this.selectedDragSource;
		this.selectedDragSource = null;
		
		var event = window.event || e;
		
		dragSource.deselectDrag(event);
		
		if (dragSource.isDragging()) {
			var mouseXY = ajax.Event.getMouseXY(event);
			
			var dropTarget = null;
			for (var i = 0 ; i < this.dropTargetList.length ; i++) {
				var droppable = this.dropTargetList[i].checkInDropTarget(
					dragSource, mouseXY);
				if (droppable) {
					dropTarget = this.dropTargetList[i];
					break;
				}
			}
			if (dropTarget) {
				dragSource.endDrag(event);
				dropTarget.drop(dragSource);
			} else {
				dragSource.cancelDrag(event);
			}
		}
		ajax.Event.removeListener(
			document, "mousemove", this.mouseMove);
		ajax.Event.removeListener(
			document, "mouseup", this.mouseUp);
		ajax.Event.stopEvent(event);
	}
}

ajax.dnd.DropTarget = function(elementId) {
	this.element = document.getElementById(elementId);
}
ajax.dnd.DropTarget.prototype = {
	checkInDropTarget: function(dragSource, mouseXY) {
		var bounds = ajax.GUI.getBounds(this.element);
		return bounds.x <= mouseXY.x && bounds.x + bounds.width >= mouseXY.x &&
		       bounds.y <= mouseXY.y && bounds.y + bounds.height >= mouseXY.y;
	},
	drop: function(dragSource) {
		var element = dragSource.getElement();
		this.element.appendChild(element);
	}
}

ajax.dnd.DragSource = function(elementId) {
	this.element = document.getElementById(elementId);
	this.element.dragSource = this;
	this.selected = false;
	this.dragging = false;
	this.diff = null;
}
ajax.dnd.DragSource.prototype = {
	getElement: function() {
		return this.element;
	},
	selectDrag: function(event) {
		this.selected = true;
		
		var elementXY = ajax.GUI.getBounds(this.element);
		var mouseXY = ajax.Event.getMouseXY(event);
		this.diff = {
			x: mouseXY.x - elementXY.x,
			y: mouseXY.y - elementXY.y
		};
	},
	deselectDrag: function(event) {
		this.selected = false;
		this.diff = null;
	},
	startDrag: function(event) {
		this.dragging = true;
		
		var elementXY = ajax.GUI.getBounds(this.element);
		this.element.style.position = "absolute";
		ajax.GUI.setOpacity(this.element, 0.60);
	},
	isDragging: function() {
		return this.dragging;
	},
	moveDrag: function(event) {
		var mouseXY = ajax.Event.getMouseXY(event);
		var newXY = {
			x: mouseXY.x - this.diff.x,
			y: mouseXY.y - this.diff.y
		}
		ajax.GUI.setXY(this.element, newXY.x, newXY.y);
	},
	endDrag: function(event) {
		this.dragging = false;
		this.element.style.position = "";
		ajax.GUI.setOpacity(this.element, 1.0);
		this.element.parentNode.removeChild(this.element);
	},
	cancelDrag: function(event) {
		this.dragging = false;
		this.element.style.position = "";
		ajax.GUI.setOpacity(this.element, 1.0);
	}
}

 1. 드래그 구현 
     1.1 단순 드래그를 지원하는 SimpleDragSource 모듈 작성 
 : [testSimpleDrag.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>Simple Drag 테스트</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="dnd.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var drag1 = new ajax.dnd.SimpleDragSource("car");
		var drag2 = new ajax.dnd.SimpleDragSource("navi");
	}
	</script>
	<style type="text/css">
	#navi {
		position: absolute;
		background-color: #aaa;
		left: 200px; top: 90px;
		width: 150px; height: 80px;
	}
	</style>
</head>
<body>
<img src="car.jpg" id="car"/>
자동차 이미지를 생각해봅시다.
<div id="navi">
	플로팅 메뉴<br/>
	메뉴1<br/>메뉴2
</div>
</body>
</html>

 2. 드래그 & 드롭 구현 
     2.1 DNDManager 클래스 
     2.2 DropTarget 클래스 
     2.3 DragSource 클래스 
     2.4 드래그 & 드롭 예제 
 : [testDND.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>드래그 앤 드롭 테스트</title>
	<style type="text/css">
	#inventory {
		position: absolute;
		border: 1px solid blue;
		left: 30px; top: 30px;
		width: 250px; height: 330px;
	}
	#cart {
		position: absolute;
		border: 1px solid red;
		left: 350px; top: 30px;
		width: 250px; height: 330px;
	}
	div.dragsource {
		background-color: #ddd;
		padding-top: 5px; padding-bottom: 5px;
		margin-top: 1px; margin-bottom: 1px;
		width: 250px;
		font-size: 12px;
	}
	div.title {
		font-weight: bold;
		border-bottom: 1px solid #333;
	}
	</style>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="dnd.js"></script>
	<script type="text/javascript">
	var dndMgr = new ajax.dnd.DNDManager();
	
	window.onload = function() {
		var product1 = new ajax.dnd.DragSource("product1");
		var product2 = new ajax.dnd.DragSource("product2");
		var product3 = new ajax.dnd.DragSource("product3");
		
		var inventory = new ajax.dnd.DropTarget("inventory");
		var cart = new ajax.dnd.DropTarget("cart");
		
		dndMgr.addDropTarget(inventory);
		dndMgr.addDropTarget(cart);
		
		dndMgr.addDragSource(product1);
		dndMgr.addDragSource(product2);
		dndMgr.addDragSource(product3);
	}
	</script>
</head>
<body>
<div id="inventory">
	<div class="title">상품목록</div>
	<div id="product1" class="dragsource">
		<img src="product1.jpg" />삼성 센스 Q35</div>
	<div id="product2" class="dragsource">
		<img src="product2.jpg" />LG XNOTE S1-J214</div>
	<div id="product3" class="dragsource">
		<img src="product3.jpg" />SONY 바이오 VGN-FE15LP</div>
</div>
<div id="cart"><div class="title">장바구니</div></div>
</body>
</html>

