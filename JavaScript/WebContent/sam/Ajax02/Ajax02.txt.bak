***Asyncronous JavaScript and XML***
 [[[ DOM(Document Object Model)과 XML]]]
   - XML 문서와 DOM 트리 구조 
[books.xml]
<?xml version="1.0" encoding="euc-kr" ?>

<books>
	<book>
        <title>프로젝트 생존 전략</title>
        <author>스티브 맥코넬</author>
	</book>
	<book>
        <title>JSP 2.0 프로그래밍</title>
        <author>최범균</author>
	</book>
	<book>
        <title>웹 표준</title>
        <author>댄 씨더홈</author>
	</book>
</books>

   - HTML 문서와 DOM 트리 구조 
[simple.html]
<html>
<head>
	<title>문서구조</title>
</head>
<body>
	<h1>제목</h1>
	<form></form>
</body>
</html>

 : DOM API를 사용하여 노드에 접근하기 
[usingDOM.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>DOM API를 사용한 HTML 문서 접근</title>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var roodNode = document.documentElement;
		log("root 태그: "+roodNode.tagName);
		
		var bodyNode = document.getElementsByTagName("body").item(0);
		log("body 태그: "+bodyNode.tagName);
		
		var spanList = document.getElementsByTagName("span");
		log("span 태그의 개수: "+spanList.length);
		for (var i = 0 ; i < spanList.length ; i++) {
			var span = spanList.item(i);
			log((i+1)+"번째 span의 id : "+span.getAttribute("id"));
		}
		
		var debugConsoleDiv = document.getElementById("debugConsole");
		log("debugConsole 요소: "+debugConsoleDiv.tagName);
		
		var bodyLastChild = bodyNode.lastChild;
		log("body의 마지막 자식 노드: "+bodyLastChild.nodeName);
		
	}
	</script>
</head>
<body>
<SPAN id="a">a</SPAN>
<p>test<span id="b">b</span></p>
<div><p>p</p><span id="c">c</span></div>
<div id="debugConsole" style="border: 1px solid #000"></div>
</body>
</html>

 : DOM API를 사용하여 HTML 화면 변경
[changeUsingDom.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>DOM을 사용한 변경</title>
	<script type="text/javascript">
	var count = 0;
	function appendItem() {
		count++;
		var newItem = document.createElement("div");
		newItem.setAttribute("id", "item_" + count);
		var html = '새로 추가된 아이템['+count+']'+
		'<input type="button" value="삭제" onclick="removeItem(' + count + ')"/>';
		newItem.innerHTML = html;
		
		var itemListNode = document.getElementById('itemList');
		itemListNode.appendChild(newItem);
	}
	function removeItem(idCount) {
		var item = document.getElementById("item_"+idCount);
		if (item != null) {
			item.parentNode.removeChild(item);
		}
	}
	</script>
</head>
<body>
<input type='button' value='추가' onclick='appendItem()' />
<div id="itemList"></div>
</body>
</html>

 : 서버에서 XML 응답 생성하기
[books.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>

<books>
    <book>
        <title>프로젝트 생존 전략</title>
        <author>스티브 맥코넬</author>
    </book>
    <book>
        <title>JSP 2.0 프로그래밍</title>
        <author>최범균</author>
    </book>
    <book>
        <title>웹 표준</title>
        <author>댄 씨더홈</author>
    </book>
</books>

[viewBooks.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>책정보 보기</title>
	<script type="text/javascript" src="httpRequest.js"></script>
	<script type="text/javascript">
	function loadBooks() {
		sendRequest("books.jsp", null, loadedBooks, "GET");
	}
	function loadedBooks() {
		if (httpRequest.readyState == 4) {
			if (httpRequest.status == 200) {
				var xmlDoc = httpRequest.responseXML;
				var bookList = xmlDoc.getElementsByTagName("book");
				var message = "책 개수 : "+bookList.length+"권\n";
				for (var i = 0 ; i < bookList.length ; i++) {
					var book = bookList.item(i);
					var titleValue = book.getElementsByTagName("title").item(0)
					                     .firstChild.nodeValue;
					var authorValue = book.getElementsByTagName("author").item(0)
					                      .firstChild.nodeValue;
					message += titleValue + "(" + authorValue + ")\n";
				}
				alert(message);
			}
		}
	}
	
	window.onload = function() {
		loadBooks();
	}
	</script>
</head>
<body>
책 정보를 alert 으로 출력
</body>
</html>

===================================================================
  [[[자바스크립트 객체 JSON 표기법]]]
 : prototype을 사용한 자바스크립트 클래스 만들기 
[log.js]
function log(msg) {
	var console = document.getElementById("debugConsole");
	if (console != null) {
		console.innerHTML += msg +"<br/>";
	}
}
	
[member.js]
Member = function(name, id, securityNo) {
	this.name = name;
	this.id = id;
	this.securityNo = securityNo;
}
Member.prototype.setValue = function(newName, newId, newSecurityNo) {
	this.name = newName;
	this.id = newId;
	this.securityNo = newSecurityNo;
}
Member.prototype.getAge = function() {
	var birthYear = parseInt(this.securityNo.substring(0, 2));
	var code = this.securityNo.substring(6,7);
	if (code == '1' || code == '2') {
		birthYear += 1900;
	} else if (code == '3' || code == '4') {
		birthYear += 2000;
	}
	var today = new Date();
	return today.getFullYear() - birthYear;
}
Member.prototype.toString = function() {
	return this.name + "[" + this.id + "]";
}

[useMember.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>Member 클래스 사용</title>
	<script type="text/javascript" src="log.js"></script>
	<script type="text/javascript" src="member.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		var mem = new Member("era13", "최범균", "7700001000000");
		log('변경전');
		log('회원 : ' + mem.toString());
		log('나이 : ' + mem.getAge());
		
		mem.setValue("madvirus", "최범균2", "8000001000000");
		log('변경후');
		log('회원 : ' + mem.toString());
		log('나이 : ' + mem.getAge());
	}
	</script>
</head>
<body>
<div id="debugConsole"></div>
</body>
</html>

 : JSON 표기법 
[ajax.js : 클래스로 XMLHttpRequest 모듈 만들기]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

 : 응답 결과를 자바스크립트 객체로 저장하기 
 - XML 응답을 객체로 변환 
[member_xml.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>

<result>
	<code>success</code>
	<data>
		<member>
			<name>최범균</name>
			<id>madvirus</id>
			<sno>7700001000000</sno>
		</member>
	</data>
</result>

[loadMemberFromXML.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>XML로부터 객체 생성</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="member.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		new ajax.xhr.Request("member_xml.jsp", "", viewInfo, "GET");
	}
	function viewInfo(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var docXML = req.responseXML;
				var code = docXML.getElementsByTagName("code")
				                 .item(0).firstChild.nodeValue;
				if (code == 'success') {
					var name = docXML.getElementsByTagName("name")
					                 .item(0).firstChild.nodeValue;
					var id = docXML.getElementsByTagName("id")
					                 .item(0).firstChild.nodeValue;
					var sno = docXML.getElementsByTagName("sno")
					                 .item(0).firstChild.nodeValue;

					var mem = new Member(name, id, sno);
					alert(mem.toString() + ", " + mem.getAge() +"세");
				} else {
					alert("실패");
				}
			} else {
				alert("에러 발생:"+req.status);
			}
		}
	}
	</script>
</head>
<body>
</body>
</html>

 - JSON 응답을 객체로 변환 
[member_json.jsp]
<%@ page contentType="text/plain; charset=euc-kr" %>
{
	code: 'success',
	data: {
		member: {
			name: '최범균',
			id: 'madvirus',
			sno: '7700001000000'
		}
	}
}

[loadMemberFromJSON.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>JSON으로부터 객체 생성</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		new ajax.xhr.Request("member_json.jsp", "", viewInfo, "GET");
	}
	function viewInfo(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var result = eval("(" + req.responseText + ")");
				if (result.code == 'success') {
					var m = result.data.member;
					alert(m.id + "[" + m.name + "]");
				} else {
					alert("실패");
				}
			} else {
				alert("에러 발생:"+req.status);
			}
		}
	}
	</script>
</head>
<body>
</body>
</html>

 - XML  JSON 응답을 객체로 변환 
[member_xmljson.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>

<result>
	<code>success</code>
	<data><![CDATA[
	{
		name: '최범균',
		id: 'madvirus',
		sno: '7700001000000'
	}
	]]>
	</data>
</result>

[loadMemberFromXMLJSON.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>XML JSON으로부터 객체 생성</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="member.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		new ajax.xhr.Request("member_xmljson.jsp", "", viewInfo, "GET");
	}
	function viewInfo(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var docXML = req.responseXML;
				var code = docXML.getElementsByTagName("code")
				                 .item(0).firstChild.nodeValue;
				if (code == 'success') {
					var dataJSON = docXML.getElementsByTagName("data")
					                 .item(0).firstChild.nodeValue;
					var data = eval("("+dataJSON+")");
					alert(data.name + "[" + data.id +"]");
				} else {
					alert("실패");
				}
			} else {
				alert("에러 발생:"+req.status);
			}
		}
	}
	</script>
</head>
<body>
</body>
</html>



 : JSON 표기법 응답 생성시 주의점 
[Util.java]
package util;

public class Util {
	public static String toJS(String str) {
		return str.replace("\\", "\\\\")
		          .replace("\'", "\\\'")
		          .replace("\"", "\\\"")
		          .replace("\r\n", "\\n")
		          .replace("\n", "\\n");
	}
}

===================================================================
  [[[Ajax로 구현한 댓글]]]
 : 댓글 테이블 생성 
 create table COMMENTS (
    ID        NUMBER PRIMARY KEY,
    NAME      VARCHAR2(20) NOT NULL,
    CONTENT   VARCHAR2(4000) NOT NULL
);

create table ID_REPOSITORY (
    NAME      VARCHAR2(20) PRIMARY KEY,
    VALUE     NUMBER
);

insert into ID_REPOSITORY values ('COMMENTS', 0);

commit;

[ajax.js : 클래스로 XMLHttpRequest 모듈 만들기]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

 : 목록 및 폼 출력 위한 HTML 코드 
[commentclient.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>댓글처리예제</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript">
	window.onload = function() {
		loadCommentList();
	}
	function loadCommentList() {
		new ajax.xhr.Request("commentlist.jsp", "", loadCommentResult, 'GET');
	}
	function loadCommentResult(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var xmlDoc = req.responseXML;
				var code = xmlDoc.getElementsByTagName('code').item(0)
				                 .firstChild.nodeValue;
				if (code == 'success') {
					var commentList = eval( "(" +
					    xmlDoc.getElementsByTagName('data').item(0)
					          .firstChild.nodeValue +
					")" );
					var listDiv = document.getElementById('commentList');
					for (var i = 0 ; i < commentList.length ; i++) {
						var commentDiv = makeCommentView(commentList[i]);
						listDiv.appendChild(commentDiv);
					}
				} else if (code == 'error') {
					var message = xmlDoc.getElementsByTagName('message')
					                    .item(0).firstChild.nodeValue;
					alert("에러 발생:"+message);
				}
			} else {
				alert("댓글 목록 로딩 실패:"+req.status);
			}
		}
	}
	function makeCommentView(comment) {
		var commentDiv = document.createElement('div');
		commentDiv.setAttribute('id', 'c'+comment.id);
		var html = '<strong>'+comment.name+'</strong><br/>'+
			comment.content.replace(/\n/g, '\n<br/>')+'<br/>'+
			'<input type="button" value="수정" '+
			'onclick="viewUpdateForm('+comment.id+')"/>'+
			'<input type="button" value="삭제" '+
			'onclick="confirmDeletion('+comment.id+')"/>' ;
		
		commentDiv.innerHTML = html;
		commentDiv.comment = comment;
		commentDiv.className = "comment";
		return commentDiv;
	}
	function addComment() {
		var name = document.addForm.name.value;
		var content = document.addForm.content.value;
		var params = "name="+encodeURIComponent(name)+"&"+
		             "content="+encodeURIComponent(content);
		new ajax.xhr.Request('commentadd.jsp', params, addResult, 'POST');
	}
	function addResult(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var xmlDoc = req.responseXML;
				var code = xmlDoc.getElementsByTagName('code').item(0)
				                 .firstChild.nodeValue;
				if (code == 'success') {
					var comment = eval( "(" +
					    xmlDoc.getElementsByTagName('data').item(0)
					          .firstChild.nodeValue +
					")" );
					var listDiv = document.getElementById('commentList');
					var commentDiv = makeCommentView(comment);
					listDiv.appendChild(commentDiv);
					
					document.addForm.name.value = '';
					document.addForm.content.value = '';
					
					alert("등록했습니다!["+comment.id+"]");
				} else if (code == 'fail') {
					var message = xmlDoc.getElementsByTagName('message')
					                    .item(0).firstChild.nodeValue;
					alert("에러 발생:"+message);
				}
			} else {
				alert("서버 에러 발생: " + req.status);
			}
		}
	}
	function viewUpdateForm(commentId) {
		var commentDiv = document.getElementById('c'+commentId);
		var updateFormDiv = document.getElementById('commentUpdate');
		if (updateFormDiv.parentNode != commentDiv) {
			updateFormDiv.parentNode.removeChild(updateFormDiv);
			commentDiv.appendChild(updateFormDiv);
		}
		var comment = commentDiv.comment;
		document.updateForm.id.value = comment.id;
		document.updateForm.name.value = comment.name;
		document.updateForm.content.value = comment.content;
		updateFormDiv.style.display = '';
	}
	function cancelUpdate() {
		hideUpdateForm();
	}
	function hideUpdateForm() {
		var updateFormDiv = document.getElementById('commentUpdate');
		updateFormDiv.style.display = 'none';
		updateFormDiv.parentNode.removeChild(updateFormDiv);
		document.documentElement.appendChild(updateFormDiv);
	}
	function updateComment() {
		var id = document.updateForm.id.value;
		var name = document.updateForm.name.value;
		var content = document.updateForm.content.value;
		var params = "id="+encodeURIComponent(id)+"&"+
		             "name="+encodeURIComponent(name)+"&"+
		             "content="+encodeURIComponent(content);
		new ajax.xhr.Request('commentupdate.jsp', params, updateResult, 'POST');
	}
	function updateResult(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var xmlDoc = req.responseXML;
				var code = xmlDoc.getElementsByTagName('code')
				                 .item(0).firstChild.nodeValue;
				if (code == 'success') {
					hideUpdateForm();
					var comment = eval( "(" +
					    xmlDoc.getElementsByTagName('data').item(0)
					          .firstChild.nodeValue +
					")" );
					var listDiv = document.getElementById('commentList');
					var newCommentDiv = makeCommentView(comment);
					var oldCommentDiv = 
					        document.getElementById('c'+comment.id);
					listDiv.replaceChild(newCommentDiv, oldCommentDiv);
					alert("수정했습니다!");
				} else if (code == 'fail') {
					var message = xmlDoc.getElementsByTagName('message')
					                    .item(0).firstChild.nodeValue;
					alert("에러 발생:"+message);
				}
			} else {
				alert("서버 에러 발생: " + req.status);
			}
		}
	}
	function confirmDeletion(commentId) {
		if (confirm("삭제하시겠습니까?")) {
			var params = "id="+commentId;
			new ajax.xhr.Request(
				'commentdelete.jsp', params, removeResult, 'POST');
		}
	}
	function removeResult(req) {
		if (req.readyState == 4) {
			if (req.status == 200) {
				var xmlDoc = req.responseXML;
				var code = xmlDoc.getElementsByTagName('code').item(0)
				                 .firstChild.nodeValue;
				if (code == 'success') {
					var deletedId = 
						xmlDoc.getElementsByTagName('id').item(0)
						      .firstChild.nodeValue;
					var commentDiv = document.getElementById("c"+deletedId);
					commentDiv.parentNode.removeChild(commentDiv);
					
					alert("삭제했습니다");
				} else if (code == 'fail') {
					var message = xmlDoc.getElementsByTagName('message')
					                    .item(0).firstChild.nodeValue;
					alert("에러 발생:"+message);
				}
			} else {
				alert("서버 에러 발생: " + req.status);
			}
		}
	}
	</script>
	<style>
	div.comment {
		border: 1px solid #000;
		padding-bottom: 3px;
	}
	</style>
</head>
<body>

<div id="commentList"></div>

<div id="commentAdd">
	<form action="" name="addForm">
	이름: <input type="text" name="name" size="10"><br/>
	내용: <textarea name="content" cols="20" rows="2"></textarea><br/>
	<input type="button" value="등록" onclick="addComment()"/>
	</form>
</div>

<div id="commentUpdate" style="display: none">
	<form action="" name="updateForm">
	<input type="hidden" name="id" value=""/>
	이름: <input type="text" name="name" size="10"><br/>
	내용: <textarea name="content" cols="20" rows="2"></textarea><br/>
	<input type="button" value="등록" onclick="updateComment()"/>
	<input type="button" value="취소" onclick="cancelUpdate()"/>
	</form>
</div>

</body>
</html>

 : 댓글 목록 읽기 
[commentlist.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>
<%@ page import = "java.sql.Connection" %>
<%@ page import = "java.sql.Statement" %>
<%@ page import = "java.sql.ResultSet" %>
<%@ page import = "java.sql.SQLException" %>
<%@ page import = "util.Util" %>
<%@ page import = "util.DB" %>
<%
	Connection conn = null;
	Statement stmt = null;
	ResultSet rs = null;
	try {
		conn = DB.getConnection();
		stmt = conn.createStatement();
		rs = stmt.executeQuery("select * from COMMENTS order by ID");
%>
<result>
	<code>success</code>
	<data><![CDATA[
	[
<%
		if (rs.next()) {
			do {
				if (rs.getRow() > 1) { %>
		,
<%
				}
%>
		{
			id: <%= rs.getInt("ID") %>,
			name: '<%= Util.toJS(rs.getString("NAME")) %>',
			content: '<%= Util.toJS(rs.getString("CONTENT")) %>'
		}
<%
			} while(rs.next());
		}
%>
	]
	]]></data>
</result>
<%	} catch(Throwable e) {
		out.clearBuffer();
 %>
<result>
	<code>error</code>
	<message><![CDATA[<%= e.getMessage() %>]]></message>
</result>
<%	} finally {
		if (rs != null) try { rs.close(); } catch(SQLException ex) {}
		if (stmt != null) try { stmt.close(); } catch(SQLException ex) {}
		if (conn != null) try { conn.close(); } catch(SQLException ex) {}
	}
%>

 : 댓글 쓰기 
[commentadd.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>
<%@ page import = "java.sql.Connection" %>
<%@ page import = "java.sql.Statement" %>
<%@ page import = "java.sql.PreparedStatement" %>
<%@ page import = "java.sql.ResultSet" %>
<%@ page import = "java.sql.SQLException" %>
<%@ page import = "util.Util" %>
<%@ page import = "util.DB" %>
<%
	request.setCharacterEncoding("utf-8");
	String name = request.getParameter("name");
	String content = request.getParameter("content");

	Connection conn = null;
	Statement stmtIdSelect = null;
	ResultSet rsIdSelect = null;
	PreparedStatement pstmtIdUpdate = null;
	PreparedStatement pstmtCommentInsert = null;
	
	try {
		int nextId = 0;
		
		conn = DB.getConnection();
		conn.setAutoCommit(false);
		
		stmtIdSelect = conn.createStatement();
		rsIdSelect = stmtIdSelect.executeQuery(
			"select VALUE from ID_REPOSITORY where NAME='COMMENTS'");
		if (rsIdSelect.next()) {
			nextId = rsIdSelect.getInt("VALUE");
		}
		nextId ++;
		
		pstmtIdUpdate = conn.prepareStatement(
			"update ID_REPOSITORY set VALUE = ? where NAME='COMMENTS'");
		pstmtIdUpdate.setInt(1, nextId);
		pstmtIdUpdate.executeUpdate();
		
		pstmtCommentInsert = conn.prepareStatement(
			"insert into COMMENTS values (?, ?, ?)");
		pstmtCommentInsert.setInt(1, nextId);
		pstmtCommentInsert.setString(2, name);
		pstmtCommentInsert.setString(3, content);
		pstmtCommentInsert.executeUpdate();
		
		conn.commit();
%>
<result>
	<code>success</code>
	<data><![CDATA[
	{
		id: <%= nextId %>,
		name: '<%= Util.toJS(name) %>',
		content: '<%= Util.toJS(content) %>'
	}
	]]></data>
</result>
<%
	} catch(Throwable e) {
		try { conn.rollback(); } catch(SQLException ex) {}
%>
<result>
	<code>error</code>
	<message><![CDATA[<%= e.getMessage() %>]]></message>
</result>
<%
	} finally {
		if (rsIdSelect != null) 
			try { rsIdSelect.close(); } catch(SQLException ex) {}
		if (stmtIdSelect != null) 
			try { stmtIdSelect.close(); } catch(SQLException ex) {}
		if (pstmtIdUpdate != null) 
			try { pstmtIdUpdate.close(); } catch(SQLException ex) {}
		if (pstmtCommentInsert != null) 
			try { pstmtCommentInsert.close(); } catch(SQLException ex) {}
		if (conn != null) try {
			conn.setAutoCommit(true);
			conn.close();
		} catch(SQLException ex) {}
	}
%>

 : 댓글 수정하기 
[commentupdate.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>
<%@ page import = "java.sql.Connection" %>
<%@ page import = "java.sql.Statement" %>
<%@ page import = "java.sql.PreparedStatement" %>
<%@ page import = "java.sql.SQLException" %>
<%@ page import = "util.Util" %>
<%@ page import = "util.DB" %>
<%
	request.setCharacterEncoding("utf-8");
	int id = Integer.parseInt(request.getParameter("id"));
	String name = request.getParameter("name");
	String content = request.getParameter("content");
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	try {
		conn = DB.getConnection();
		conn.setAutoCommit(false);
		
		pstmt = conn.prepareStatement(
			"update COMMENTS set NAME=?, CONTENT=? where ID=?");
		pstmt.setString(1, name);
		pstmt.setString(2, content);
		pstmt.setInt(3, id);
		pstmt.executeUpdate();
		
		conn.commit();
%>
<result>
	<code>success</code>
	<data><![CDATA[
	{
		id: <%= id %>,
		name: '<%= Util.toJS(name) %>',
		content: '<%= Util.toJS(content) %>'
	}
	]]></data>
</result>
<%
	} catch(Throwable e) {
		try { conn.rollback(); } catch(SQLException ex) {}
%>
<result>
	<code>error</code>
	<message><![CDATA[<%= e.getMessage() %>]]></message>
</result>
<%
	} finally {
		if (pstmt != null) 
			try { pstmt.close(); } catch(SQLException ex) {}
		if (conn != null) try {
			conn.setAutoCommit(true);
			conn.close();
		} catch(SQLException ex) {}
	}
%>

 : 댓글 삭제하기 
[commentdelete.jsp]
<?xml version="1.0" encoding="euc-kr" ?>
<%@ page contentType="text/xml; charset=euc-kr" %>
<%@ page import = "java.sql.Connection" %>
<%@ page import = "java.sql.Statement" %>
<%@ page import = "java.sql.PreparedStatement" %>
<%@ page import = "java.sql.SQLException" %>
<%@ page import = "util.Util" %>
<%@ page import = "util.DB" %>
<%
	request.setCharacterEncoding("utf-8");
	int id = Integer.parseInt(request.getParameter("id"));
	
	Connection conn = null;
	PreparedStatement pstmt = null;
	try {
		conn = DB.getConnection();
		conn.setAutoCommit(false);
		
		pstmt = conn.prepareStatement(
			"delete from COMMENTS where ID=?");
		pstmt.setInt(1, id);
		pstmt.executeUpdate();
		
		conn.commit();
%>
<result>
	<code>success</code>
	<id><%= id %></id>
</result>
<%
	} catch(Throwable e) {
		try { conn.rollback(); } catch(SQLException ex) {}
%>
<result>
	<code>error</code>
	<message><![CDATA[<%= e.getMessage() %>]]></message>
</result>
<%
	} finally {
		if (pstmt != null)
			try { pstmt.close(); } catch(SQLException ex) {}
		if (conn != null) try {
			conn.setAutoCommit(true);
			conn.close();
		} catch(SQLException ex) {}
	}
%>

 :DB 클래스 소스 코드 
[DB.java]
package util;

import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;

public class DB {
	static {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch(Throwable e) {
			throw new ExceptionInInitializerError(e);
		}
	}
	
	public static Connection getConnection() throws SQLException {
		return DriverManager.getConnection(
				"jdbc:oracle:thin:@192.168.0.100:1521:ORCL",
				"ssol",
				"ssol"
			);
		
	}
}

