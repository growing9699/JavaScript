***Asynchronous Javascript and XML***
Part 4 MVC 패턴 구현
Chap 11 자바스크립트에서 MVC 패턴 구현하기
 : [ajax.js]
var ajax = {};
ajax.xhr = {};

ajax.xhr.Request = function(url, params, callback, method) {
	this.url = url;
	this.params = params;
	this.callback = callback;
	this.method = method;
	this.send();
}
ajax.xhr.Request.prototype = {
	getXMLHttpRequest: function() {
		if (window.ActiveXObject) {
			try {
				return new ActiveXObject("Msxml2.XMLHTTP");
			} catch(e) {
				try {
					return new ActiveXObject("Microsoft.XMLHTTP");
				} catch(e1) { return null; }
			}
		} else if (window.XMLHttpRequest) {
			return new XMLHttpRequest();
		} else {
			return null;
		}		
	},
	send: function() {
		this.req = this.getXMLHttpRequest();
		
		var httpMethod = this.method ? this.method : 'GET';
		if (httpMethod != 'GET' && httpMethod != 'POST') {
			httpMethod = 'GET';
		}
		var httpParams = (this.params == null || this.params == '') ? 
		                 null : this.params;
		var httpUrl = this.url;
		if (httpMethod == 'GET' && httpParams != null) {
			httpUrl = httpUrl + "?" + httpParams;
		}
		this.req.open(httpMethod, httpUrl, true);
		this.req.setRequestHeader(
			'Content-Type', 'application/x-www-form-urlencoded');
		var request = this;
		this.req.onreadystatechange = function() {
			request.onStateChange.call(request);
		}
		this.req.send(httpMethod == 'POST' ? httpParams : null);
	},
	onStateChange: function() {
		this.callback(this.req);
	}
}

ajax.Event = {};
ajax.Event.addListener = function(element, name, observer, useCapture) {
    useCapture = useCapture || false;

	if (element.addEventListener) {
		element.addEventListener(name, observer, useCapture);
	} else if (element.attachEvent) {
		element.attachEvent('on' + name, observer);
	}
}
ajax.Event.removeListener = function(element, name, observer, useCapture) {
	useCapture = useCapture || false;
	
	if (element.removeEventListener) {
		element.removeEventListener(name, observer, useCapture);
	} else if (element.detachEvent) {
		element.detachEvent('on' + name, observer);
	}
}
ajax.Event.getTarget = function(event) {
	if (event == null) return null;
	if (event.target) return event.target;
	else if (event.srcElement) return event.srcElement;
	return null;
}
ajax.Event.getMouseXY = function(event) {
	var mouseX = event.clientX;
	var mouseY = event.clientY;
	
	var dd = document.documentElement;
	var db = document.body;
	if (dd) {
		mouseX += dd.scrollLeft;
		mouseY += dd.scrollTop;
	} else if (db) {
		mouseX += db.scrollLeft;
		mouseY += db.scrollTop;
	}
	return {x: mouseX, y: mouseY};
}
ajax.Event.isLeftButton= function(event) {
	return (event.which) ? 
	       event.which == 1 && event.button == 0 :
	       (event.type == 'click') ? event.button == 0 : event.button == 1;
}
ajax.Event.isRightButton = function(event) {
	return event.button == 2;
}
ajax.Event.stopPropagation = function(event) {
	if (event.stopPropagation) {
	    event.stopPropagation();
	} else {
	    event.cancelBubble = true;
	}
}
ajax.Event.preventDefault = function(event) {
	if (event.preventDefault) {
	    event.preventDefault();
	} else {
	    event.returnValue = false;
	}
}
ajax.Event.stopEvent = function(event) {
	ajax.Event.stopPropagation(event);
	ajax.Event.preventDefault(event);
}
ajax.Event.bindAsListener = function(func, obj) {
	return function() {
		return func.apply(obj, arguments);
	}
}

ajax.GUI = {};
ajax.GUI.setOpacity = function(el, opacity) {
	if (el.filters) {
		el.style.filter = 'alpha(opacity=' + opacity * 100 + ')';
	} else {
		el.style.opacity = opacity;
	}
}
ajax.GUI.getStyle = function(el, property) {
	var value = null;
	var dv = document.defaultView;
	
	if (property == 'opacity' && el.filters) {// IE opacity
		value = 1;
		try {
			value = el.filters.item('alpha').opacity / 100;
		} catch(e) {}
	} else if (el.style[property]) {
		value = el.style[property];
	} else if (el.currentStyle && el.currentStyle[property]) {
		value = el.currentStyle[property];
	} else if ( dv && dv.getComputedStyle ) {
		// 대문자를 소문자로 변환하고 그 앞에 '-'를 붙인다.
		var converted = '';
		for(i = 0, len = property.length;i < len; ++i) {
			if (property.charAt(i) == property.charAt(i).toUpperCase()) {
				converted = converted + '-' + 
				            property.charAt(i).toLowerCase();
			} else {
				converted = converted + property.charAt(i);
			}
		}
		if (dv.getComputedStyle(el, '').getPropertyValue(converted)) {
			value = dv.getComputedStyle(el, '').getPropertyValue(converted);
		}
	}
	return value;
}

ajax.GUI.getXY = function(el) {
	// el은 문서에 포함되어 있어야 하고, 화면에 보여야 한다.
	if (el.parentNode === null || el.style.display == 'none') {
		return false;
	}
	
	var parent = null;
	var pos = [];
	var box;
	
	if (document.getBoxObjectFor) { // gecko 엔진 기반
		box = document.getBoxObjectFor(el);
		pos = [box.x, box.y];
	} else { // 기타 브라우저
		pos = [el.offsetLeft, el.offsetTop];
		parent = el.offsetParent;
		if (parent != el) {
			while (parent) {
				pos[0] += parent.offsetLeft;
				pos[1] += parent.offsetTop;
				parent = parent.offsetParent;
			}
		}
		// 오페라와 사파리의 'absolute' postion의 경우
		// body의 offsetTop을 잘못 계산하므로 보정해야 한다.
		var ua = navigator.userAgent.toLowerCase();
		if (
			ua.indexOf('opera') != -1
			|| ( ua.indexOf('safari') != -1 && this.getStyle(el, 'position') == 'absolute' )
		) {
			pos[1] -= document.body.offsetTop;
		}
	}
	
	if (el.parentNode) { parent = el.parentNode; }
	else { parent = null; }
	
	// body 또는 html 이외의 부모 노드 중에 스크롤되어 있는
	// 영역이 있다면 알맞게 처리한다.
	while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {
		pos[0] -= parent.scrollLeft;
		pos[1] -= parent.scrollTop;
		
		if (parent.parentNode) { parent = parent.parentNode; }
		else { parent = null; }
	}
	return {x: pos[0], y: pos[1]};
}
ajax.GUI.getX = function(el) {
	return ajax.GUI.getXY(el).x;
}
ajax.GUI.getY = function(el) {
	return ajax.GUI.getXY(el).y;
}
ajax.GUI.getBounds = function(el) {
	var xy = ajax.GUI.getXY(el);
	return {
		x: xy.x,
		y: xy.y,
		width: el.offsetWidth,
		height: el.offsetHeight
	};
}
ajax.GUI.setXY = function(el, x, y) {
	var pageXY = ajax.GUI.getXY(el);
	if (pageXY === false) { return false; }
	var position = ajax.GUI.getStyle(el, 'position');
	if (!position || position == 'static') {
		el.style.position = 'relative';
	}
	var delta = {
		x: parseInt( ajax.GUI.getStyle(el, 'left'), 10 ),
		y: parseInt( ajax.GUI.getStyle(el, 'top'), 10 )
	};
	if ( isNaN(delta.x) ) { delta.x = 0; }
	if ( isNaN(delta.y) ) { delta.y = 0; }
	
	if (x != null) {
		el.style.left = (x - pageXY.x + delta.x) + 'px';
	}
	if (y != null) {
		el.style.top = (y - pageXY.y + delta.y) + 'px';
	}
	
	return true;
}

 1. MVC 패턴이란? 
 2. MVC 패턴의 구현 
     2.1 모델의 구현: CheckButtonModel 
     2.2 컨트롤러의 구현: CheckButton 
     2.3 뷰의 구현: CheckButtonUI 
     2.4 CheckButton 컴포넌트 사용 
     2.5 새로운 UI의 추가: CheckButtonUI2 
 : [checkbutton.js]
CheckButtonModel = function(checked, label) {
	this.listeners = new Array();
	this.checked = checked;
	this.label = label;
}
CheckButtonModel.prototype = {
	addListener: function(listener) {
		this.listeners[this.listeners.length] = listener;
	},
	removeListener: function(listener) {
		if (this.listeners.length == 0) return;
		
		var newListeners = new Array();
		for (var i = 0 ; i < this.listeners.length ; i++) {
			if (this.listeners[i] != listener) {
				newListeners[newListeners.length] =
					this.listeners[i];
			}
		}
		this.listeners = newListeners;
	},
	notify: function() {
		for (var i = 0 ; i < this.listeners.length ; i++) {
			this.listeners[i].changed(this);
		}
	},
	setChecked: function(checked) {
		this.checked = checked;
		this.notify();
	},
	toggle: function() {
		if (this.checked) {
			this.checked = false;
		} else {
			this.checked = true;
		}
		this.notify();
	},
	isChecked: function() {
		return this.checked;
	},
	getLabel: function() {
		return this.label;
	}
}

CheckButton = function(model, ui) {
	this.model = model;
	this.ui = ui;
	
	this.model.addListener(this);
	this.ui.setCheckButton(this);
	
	this.ui.render();
}
CheckButton.prototype = {
	setChecked: function(checked) {
		this.model.setChecked(checked);
	},
	toggle: function() {
		this.model.toggle();
	},
	isChecked: function() {
		return this.model.isChecked();
	},
	getLabel: function() {
		return this.model.getLabel();
	},
	changed: function() {
		this.ui.update();
	}
}

CheckButtonUI = function(elementId) {
	this.element = document.getElementById(elementId);
	this.checkButton = null;
}
CheckButtonUI.prototype = {
	setCheckButton: function(checkButton) {
		this.checkButton = checkButton;
	},
	render: function() {
		var html = "<img src='";
		if (this.checkButton.isChecked()) {
			html += "images/check_on.gif'>";
		} else {
			html += "images/check_off.gif'>";
		}
		html += "&nbsp;"+this.checkButton.getLabel();
		
		this.element.style.cursor = 'hand';
		
		this.element.innerHTML = html;
		
		ajax.Event.addListener(this.element,
			"click",
			ajax.Event.bindAsListener(this.doClick, this));
	},
	doClick: function(e) {
		this.checkButton.toggle();
	},
	update: function() {
		var img = this.element.getElementsByTagName("img").item(0);
		if (this.checkButton.isChecked()) {
			img.src = "images/check_on.gif";
		} else {
			img.src = "images/check_off.gif";
		}
	}
}

CheckButtonUI2 = function(elementId) {
	this.element = document.getElementById(elementId);
	this.checkButton = null;
}
CheckButtonUI2.prototype = {
	setCheckButton: function(checkButton) {
		this.checkButton = checkButton;
	},
	render: function() {
		var html = "<img src='";
		if (this.checkButton.isChecked()) {
			html += "images/check2_on.gif'>";
		} else {
			html += "images/check2_off.gif'>";
		}
		html += "&nbsp;"+this.checkButton.getLabel();
		
		this.element.style.cursor = 'hand';
		this.element.style.fontSize = "10px";
		this.element.innerHTML = html;
		
		ajax.Event.addListener(this.element,
			"click",
			ajax.Event.bindAsListener(this.doClick, this));
	},
	doClick: function(e) {
		this.checkButton.toggle();
	},
	update: function() {
		var img = this.element.getElementsByTagName("img").item(0);
		if (this.checkButton.isChecked()) {
			img.src = "images/check2_on.gif";
		} else {
			img.src = "images/check2_off.gif";
		}
	}
}
 
 : [useCheckButton.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>CheckButton 컴포넌트 사용</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="checkbutton.js"></script>
	<script type="text/javascript">
	var mailModel = new CheckButtonModel(false, '메일 수신');
	var smsModel = new CheckButtonModel(true, 'SMS 수신');
	
	window.onload = function() {
		var mailUI = new CheckButtonUI('receiveMail');
		var smsUI = new CheckButtonUI('receiveSMS');
		
		var mailButton = new CheckButton(mailModel, mailUI);
		var smsButton = new CheckButton(smsModel, smsUI);
	}
	</script>
</head>
<body>
<span id="receiveMail"></span> <br/>
<span id="receiveSMS"></span>
<br/><br/>
<input type="button" value="메일수신토글" onclick="mailModel.toggle()"/>
<input type="button" value="SMS수신토글" onclick="smsModel.toggle()"/>
</body>
</html>

 : [useCheckButton2.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>CheckButton 컴포넌트 사용</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="checkbutton.js"></script>
	<script type="text/javascript">
	var mailModel = new CheckButtonModel(false, '메일 수신');
	
	window.onload = function() {
		var mailUI = new CheckButtonUI('receiveMail');
		var mailUI2 = new CheckButtonUI2('receiveMail2');
		
		var mailButton = new CheckButton(mailModel, mailUI);
		var mailButton2 = new CheckButton(mailModel, mailUI2);
	}
	</script>
</head>
<body>
<span id="receiveMail"></span> <br/>
<span id="receiveMail2"></span>
<br/><br/>
<input type="button" value="메일수신토글" onclick="mailModel.toggle()"/>
</body>
</html>

Chap 12 MVC 패턴을 적용한 ComboBox 컴포넌트 만들기
 1. CSS 레이어를 헤치지 않는 ComboBox 컴포넌트 
     1.1 모델: ComboBoxItem과 ComboBoxModel 구현 
     1.2 컨트롤러: ComboBox 구현 
     1.3 뷰: ComboBoxUI 구현 
     1.4 ComboBox 컴포넌트 사용하기
 : [uicombo.js]
ajax.uicombo = {}

ajax.uicombo.CB_ADD = 1;
ajax.uicombo.CB_REMOVE = 2;
ajax.uicombo.CB_SELECT = 4;
ajax.uicombo.CB_DESELECT = 8;

ajax.uicombo.ComboBoxModelItem = function(text, value) {
	this.textValue = text;
	this.value = value;
}
ajax.uicombo.ComboBoxModelItem.prototype = {
	getText: function() {
		return this.textValue;
	},
	getValue: function() {
		return this.value;
	}
}

ajax.uicombo.ComboBoxModel = function() {
	this.listeners = new Array();
	this.items = new Array();
	this.selectedIndex = -1;
}
ajax.uicombo.ComboBoxModel.prototype = {
	getSelectedIndex: function() {
		return this.selectedIndex;
	},
	select: function(idx) {
		if (idx > this.items.length - 1) return;
		
		this.selectedIndex = idx;
		this.notify(ajax.uicombo.CB_SELECT, idx, null, null);
	},
	deselect: function() {
		this.selectedIndex = -1;
		this.notify(ajax.uicombo.CB_DESELECT, -1, null, null);
	},
	getSelectedItem: function() {
		if (this.selectedIndex == -1) return null;
		return this.items[this.selectedIndex];
	},
	getText: function() {
		var item = this.getSelectedItem();
		if (item == null) return null;
		return item.getText();
	},
	getValue: function() {
		var item = this.getSelectedItem();
		if (item == null) return null;
		return item.getValue();
	},
	getItem: function(idx) {
		return this.items[idx];
	},
	addItem: function(item) {
		this.items[this.items.length] = item;
		this.notify(ajax.uicombo.CB_ADD,
		           this.selectedIndex,
		           [this.items.length-1], [item]);
	},
	removeItem: function(idx) {
		if (idx > this.items.length - 1 || idx < 0) return;
		
		var tempItems = new Array();
		var removedItem = null;
		for (var i = 0 ; i < this.items.length ; i++) {
			if (i != idx) {
				tempItems[tempItems.length] = this.items[i];
			} else {
				removedItem = this.items[i];
			}
		}
		this.items = tempItems;
		
		var oldSelectedIndex = this.selectedIndex;
		if (this.selectedIndex == idx) this.selectedIndex = -1;
		else if (this.selectedIndex > idx) this.selectedIndex--;
		
		var eventType = ajax.uicombo.CB_REMOVE;
		if (oldSelectedIndex != this.selectedIndex) {
			eventType += ajax.uicombo.CB_SELECT;
		}
		this.notify(eventType,
		            this.selectedIndex,
		            [idx], [removedItem]);
	},
	size: function() {
		return this.items.length;
	},
	addListener: function(listener) {
		this.listeners[this.listeners.length] = listener;
	},
	removeListener: function(listener) {
		var tempListeners = new Array();
		for (var i = 0 ; i < this.listeners.length ; i++) {
			if (this.listeners[i] != listener) {
				tempListeners.add(this.listeners[i]);
			}
		}
		this.listeners = tempListeners;
	},
	notify: function(type, newSelIdx, idxList, itemList) {
		for (var i = 0 ; i < this.listeners.length ; i++) {
			this.listeners[i].changed(
				type, newSelIdx, idxList, itemList);
		}
	}
}

ajax.uicombo.ComboBox = function(elementId, jsonValues, selectedIdx) {
	this.ui = new ajax.uicombo.ComboBoxUI(elementId);
	this.ui.setComboBox(this);
	
	this.model = new ajax.uicombo.ComboBoxModel();
	if (jsonValues) {
		for (var i = 0 ; i < jsonValues.length ; i++) {
			var item = new ajax.uicombo.ComboBoxModelItem(
				jsonValues[i].text,
				jsonValues[i].value
			);
			this.model.addItem(item);
		}
	}
	if (selectedIdx != null) this.model.select(selectedIdx);	
	this.model.addListener(this);
	
	this.ui.render();
}

ajax.uicombo.ComboBox.prototype = {
	getSelectedIndex: function() {
		return this.model.getSelectedIndex();
	},
	select: function(idx) {
		this.model.select(idx);
	},
	deselect: function() {
		this.model.deselect();
	},
	getSelectedItem: function() {
		return this.model.getSelectedItem();
	},
	getText: function() {
		return this.model.getText();
	},
	getValue: function() {
		return this.model.getValue();
	},
	getItem: function(idx) {
		return this.model.getItem(idx);
	},
	addItem: function(text, value) {
		var item = new ajax.uicombo.ComboBoxModelItem(
			text, value);
		this.model.addItem(item);
	},
	removeItem: function(idx) {
		this.model.removeItem(idx);
	},
	size: function() {
		return this.model.size();
	},
	clickOnItem: function(idx) {
		return this.model.select(idx);
	},
	changed: function(type, newSelIdx, idxList, itemList) {
		if (type & ajax.uicombo.CB_ADD) {
			this.ui.changedAdded(idxList);
		} else if (type & ajax.uicombo.CB_REMOVE) {
			this.ui.changedRemoved(idxList);
		}
		if ((type & ajax.uicombo.CB_SELECT) != 0 ||
		    (type & ajax.uicombo.CB_DESELECT) != 0) {
			this.ui.chagedSelection(newSelIdx);
		}
	}
}

ajax.uicombo.ComboBoxUI = function(elementId) {
	this.element = document.getElementById(elementId);
	this.titleDIV = null;
	this.listDIV = null;

	this.comboBox = null;
}
ajax.uicombo.ComboBoxUI.prototype = {
	setComboBox: function(comboBox) {
		this.comboBox = comboBox;
	},
	render: function() {
		this.element.style.border = "1px solid #333";
		
		this.titleDIV = this.makeTitle();
		this.element.appendChild(this.titleDIV);
		
		this.listDIV = this.makeList();
		this.element.appendChild(this.listDIV);
		
		ajax.Event.addListener(this.titleDIV, "mouseover",
			ajax.Event.bindAsListener(this.mouseoverOnElement, this));
		ajax.Event.addListener(this.titleDIV, "mouseout",
			ajax.Event.bindAsListener(this.mouseoutOnElement, this));

		ajax.Event.addListener(this.listDIV, "mouseover",
			ajax.Event.bindAsListener(this.mouseoverOnList, this));
		ajax.Event.addListener(this.listDIV, "mouseout",
			ajax.Event.bindAsListener(this.mouseoutOnList, this));
	},
	makeTitle: function() {
		var bounds = ajax.GUI.getBounds(this.element);
		
		var titleDIV = document.createElement("div");
		var html = "<table width='100%' border='0' cellpadding='0' cellspacing='0'>";
		html += "<tr><td><span>"
		if (this.comboBox.getSelectedIndex() == -1) {
			html += "선택하세요";
		} else {
			html += this.comboBox.getText();
		}
		html += "</span></td><td align='right'>";
		html += "<img src='images/cb_arrow.gif' border='0'/>";
		html += "</td></tr></table>";
		titleDIV.style.padding = "2px";
		titleDIV.style.cursor = "hand";
		titleDIV.innerHTML = html;
		return titleDIV;
	},
	makeList: function() {
		var listDIV = document.createElement("div");
		var bounds = ajax.GUI.getBounds(this.element);
		
		listDIV.style.cursor = "hand";
		listDIV.style.overflow = "auto";
		listDIV.style.position = "absolute";
		listDIV.style.left = bounds.x + "px";
		listDIV.style.top = (bounds.y + bounds.height - 4) + "px";
		listDIV.style.width = bounds.width + "px";
		listDIV.style.height = "90px";
		listDIV.style.visibility = "hidden";
		listDIV.style.backgroundColor = "#fff";
		listDIV.style.border = "1px solid #000";
		listDIV.style.zIndex = 10;

		for (var i = 0 ; i < this.comboBox.size() ; i++) {
			var item = this.comboBox.getItem(i);
			var itemDIV = this.makeItemDIV(item);
			listDIV.appendChild(itemDIV);
		}
		return listDIV;
	},
	makeItemDIV: function(item) {
		var itemDIV = document.createElement("div");
		itemDIV.innerHTML = item.getText();
		
		ajax.Event.addListener(itemDIV, "mouseover",
			ajax.Event.bindAsListener(this.mouseoverOnItem, this));
		ajax.Event.addListener(itemDIV, "mouseout",
			ajax.Event.bindAsListener(this.mouseoutOnItem, this));
		ajax.Event.addListener(itemDIV, "click",
			ajax.Event.bindAsListener(this.clickOnItem, this));
		
		return itemDIV;
	},
	mouseoverOnElement: function(e) {
		this.listDIV.style.visibility = "visible";
	},
	mouseoutOnElement: function(e) {
		this.listDIV.style.visibility = "hidden";
	},
	mouseoverOnList: function(e) {
		this.listDIV.style.visibility = "visible";
	},
	mouseoutOnList: function(e) {
		this.listDIV.style.visibility = "hidden";
	},
	mouseoverOnItem: function(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		target.style.backgroundColor = "#eee";
	},
	mouseoutOnItem: function(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		target.style.backgroundColor = "#fff";
	},
	clickOnItem: function(e) {
		var event = window.event || e;
		var target = ajax.Event.getTarget(event);
		var childs = target.parentNode.childNodes;
		var idx = -1;
		for (var i = 0 ; i < childs.length ; i++) {
			if (childs.item(i) == target) {
				idx = i;
				break;
			}
		}
		if (idx >= 0) {
			this.comboBox.clickOnItem(idx);
			this.listDIV.style.visibility = "hidden";
		}
	},
	chagedSelection: function(newIdx) {
		var span = this.titleDIV.getElementsByTagName("span").item(0);
		if (this.comboBox.getSelectedIndex() == -1) {
			span.innerHTML = "선택하세요";
		} else {
			span.innerHTML = this.comboBox.getText();
		}
	},
	changedAdded: function(idxs) {
		for (var i = 0 ; i < idxs.length ; i++) {
			var item = this.comboBox.getItem(idxs[i]);
			var itemDIV = this.makeItemDIV(item);
			this.listDIV.appendChild(itemDIV);
		}
	},
	changedRemoved: function(idxs) {
		var childs = this.listDIV.childNodes;
		for (var i = idxs.length - 1 ; i >= 0  ; i--) {
			var child = childs.item(idxs[i]);
			child.parentNode.removeChild(child);
		}
	}
}

 : [useCombo.html]
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ko" lang="ko">
<head>
	<meta http-equiv="content-type" content="text/html; charset=euc-kr" />
	<title>ComboBox 컴포넌트 사용</title>
	<script type="text/javascript" src="ajax.js"></script>
	<script type="text/javascript" src="uicombo.js"></script>
	<script type="text/javascript">
	var category1 = null;
	var category2 = null;
	
	window.onload = function() {
		var values = [
			{text: '노트북', value: '001'},
			{text: '데스크톱', value: '002'},
			{text: 'LCD', value: '003'},
			{text: '광마우스', value: '004'},
			{text: '무선키보드', value: '005'},
			{text: 'DVD', value: '006'}
		];
		category1 = new ajax.uicombo.ComboBox('category1', values);
		category2 = new ajax.uicombo.ComboBox('category2', []);
		
		var addBtn = document.getElementById("addBtn");
		ajax.Event.addListener(addBtn, "click", doClickOnAdd);
		
		var removeBtn = document.getElementById("removeBtn");
		ajax.Event.addListener(removeBtn, "click", doClickOnRemove);
	}
	function doClickOnAdd() {
		var text = document.getElementById("itemText").value;
		var value = document.getElementById("itemValue").value;
		category2.addItem(text, value);
	}
	function doClickOnRemove() {
		var idx = document.getElementById("itemIdx").value;
		category2.removeItem(parseInt(idx));
	}
	</script>
</head>
<body>
<div>
	<label for="itemText">이름:<input type="text" id="itemText" size="10"/>
	<label for="itemValue">값:<input type="text" id="itemValue" size="5"/>
	<input type="button" value="카테고리2 추가" id="addBtn"/>
</div>
<div>
	<label for="itemIdx">인덱스:<input type="text" id="itemIdx" size="2"/>
	<input type="button" value="카테고리2 삭제" id="removeBtn"/>
</div>

<table>
<tr>
	<td><div id="category1" style="width: 150px; "></div></td>
	<td><div id="category2" style="width: 150px; "></div></td>
</tr>
</table>
</body>
</html>

